!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!               Prepare nominal twiss tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
if (mylhcbeam==1) { use,sequence=lhcb1; } else { use,sequence=lhcb2; };

! /*
!  twiss;
!  x.ip1=table(twiss,IP1,x);px.ip1=table(twiss,IP1,px);
!  y.ip1=table(twiss,IP1,y);px.ip1=table(twiss,IP1,py); //irrelevant when recycling the sequences
! */


 twiss, table=nominal;   // used by orbit correction
 beta.ip1=table(twiss,IP1,betx);value,beta.ip1;

! print nominal optics parameter at the MB, MQS and MSS for
! b2, b3, b4, b5, a2 and a3 correction
 select, flag=twiss, clear;
 select, flag=twiss,pattern=MB\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MBH\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.14,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.15,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.16,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.17,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.18,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.19,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.20,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.21,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MQS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MSS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCO                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCD                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 twiss,  file='temp/optics0_MB.mad';

! print nominal optics parameter at the D1, MQX and triplet corrector
! for triplet correction
 select, flag=twiss, clear;
 select, flag=twiss, pattern=MQX  , class=multipole, column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MBX  , class=multipole, column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MBRC , class=multipole, column=name,betx,bety,x,y;
 if (correct_for_D2==1){
   select, flag=twiss, pattern=MBRD , class=multipole, column=name,betx,bety,x,y;
 };
 select, flag=twiss, pattern=MQSX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCQSX                 , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCSX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCTX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCOSX                 , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCOX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCSSX                 , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCDX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCDSX                 , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCTSX                 , column=name,betx,bety,x,y;
 if (correct_for_MCBX==1){
   select, flag=twiss, pattern=MCBXF, class=multipole, column=name,betx,bety,x,y;
 };
 twiss,  file='temp/optics0_inser.mad';

call, file="slhc/toolkit/BetaBeating.madx";
! disable crossing bumps
exec, crossing_disable;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                   Align separation magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!if(mylhcbeam==1){
!  call, file = "db5/measured_errors/align_D1_slices.b1.madx";
!  call, file = "db5/measured_errors/align_D2_slices.b1.madx";
!  call, file = "db5/measured_errors/align_D3_slices.b1.madx";
!  call, file = "db5/measured_errors/align_D4_slices.b1.madx";
!};
!
!if(mylhcbeam>1){
!  call, file = "db5/measured_errors/align_D1_slices.b2.madx";
!  call, file = "db5/measured_errors/align_D2_slices.b2.madx";
!  call, file = "db5/measured_errors/align_D3_slices.b2.madx";
!  call, file = "db5/measured_errors/align_D4_slices.b2.madx";
!};

call,file="slhc/toolkit/align_sepdip.madx";
!exec,align_mbxw;  ! V6.503  D1
!exec,align_mbrc15;! V6.503 D2 in IR15
exec,align_mbx15; ! HL-LHC D1
exec,align_mbrd15;! HL-LHC D2 in IR15

exec,align_mbx28; ! V6.503 D1 in IR28
exec,align_mbrc28;! V6.503 D2 in IR28
exec,align_mbrs;  ! V6.503 D3 in IR4
exec,align_mbrb;  ! V6.503 D4 in IR4

call,file="slhc/toolkit/align_mbh.madx"; ! align 11T dipoles


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!         Call error subroutines (nominal machine and new IT/D1)
!                         and error tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

! Error routine and measured error table for nominal LHC
if (on_errors_LHC==1){
  call,file="db5/measured_errors/Msubroutines_new.madx";
  call,file="db5/measured_errors/Msubroutines_MS_MSS_MO_new.madx";
  call,file="db5/toolkit/Orbit_Routines.madx";
  call,file="slhc/errors/SelectLHCMonCor.madx";
  readtable, file="db5/measured_errors/rotations_Q2_integral.tab";
};

! Error routine and error table for new IT/D1/D2/Q4/Q5
useMQXFAB=0;

call,file="slhc/errors/macro_error.madx";   ! macros for error generation in the new IT/D1's

if (on_errors_IT==1){
  if (useMQXFAB==1) {
    call,file="slhc/errors/ITa_errortable_v5"; ! target error table for the new IT
    call,file="slhc/errors/ITb_errortable_v5"; ! target error table for the new IT
  } else {
    call,file="slhc/errors/ITbody_errortable_v5"; ! target error table for the new IT
    call,file="slhc/errors/ITnc_errortable_v5"; ! target error table for the new IT
    call,file="slhc/errors/ITcs_errortable_v5"; ! target error table for the new IT
  };
};
if (on_errors_D1==1){
  call,file="slhc/errors/D1_errortable_v1"; ! target error table for the new D1
};
if (on_errors_D2==1){
  call,file="slhc/errors/D2_errortable_v5"; ! target error table for the new D2
  if (correct_for_D2==1){
    call,file="slhc/errors/D2_empty_errortable"; ! We are only correcting the b3 errors, put the other errors to zero
  };
};

if (on_errors_MCBXF==1){
  call,file="slhc/errors/MCBXFAB_errortable_v1";
};
if (on_errors_MBH==1){
  call,file="slhc/errors/MBH_errortable_v3";
};
if (on_errors_MCBRD==1){
  call,file="slhc/errors/MCBRD_errortable_v1";
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                Switch ON/OFF some multipole
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

exec ON_ALL_MULT;
if (off_all_errors==1){
  ON_A1s =  0 ; ON_A1r =  0 ; ON_B1s =  0 ; ON_B1r =  0 ;
  ON_A2s =  0 ; ON_A2r =  0 ; ON_B2s =  0 ; ON_B2r =  0 ;
  ON_A3s =  0 ; ON_A3r =  0 ; ON_B3s =  0 ; ON_B3r =  0 ;
  ON_A4s =  0 ; ON_A4r =  0 ; ON_B4s =  0 ; ON_B4r =  0 ;
  ON_A5s =  0 ; ON_A5r =  0 ; ON_B5s =  0 ; ON_B5r =  0 ;
  ON_A6s =  0 ; ON_A6r =  0 ; ON_B6s =  0 ; ON_B6r =  0 ;
  ON_A7s =  0 ; ON_A7r =  0 ; ON_B7s =  0 ; ON_B7r =  0 ;
  ON_A8s =  0 ; ON_A8r =  0 ; ON_B8s =  0 ; ON_B8r =  0 ;
  ON_A9s =  0 ; ON_A9r =  0 ; ON_B9s =  0 ; ON_B9r =  0 ;
  ON_A10s = 0 ; ON_A10r = 0 ; ON_B10s = 0 ; ON_B10r = 0 ;
  ON_A11s = 0 ; ON_A11r = 0 ; ON_B11s = 0 ; ON_B11r = 0 ;
  ON_A12s = 0 ; ON_A12r = 0 ; ON_B12s = 0 ; ON_B12r = 0 ;
  ON_A13s = 0 ; ON_A13r = 0 ; ON_B13s = 0 ; ON_B13r = 0 ;
  ON_A14s = 0 ; ON_A14r = 0 ; ON_B14s = 0 ; ON_B14r = 0 ;
  ON_A15s = 0 ; ON_A15r = 0 ; ON_B15s = 0 ; ON_B15r = 0 ;
} else {
  ON_A1s =  0 ; ON_A1r =  0 ; ON_B1s =  0 ; ON_B1r =  0 ;
  ON_A2s =  0 ; ON_A2r =  0 ; ON_B2s =  0 ; ON_B2r =  0 ;
  ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1 ;
  ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1 ;
  ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1 ;
  ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1 ;
  ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1 ;
  ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1 ;
  ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1 ;
  ON_A10s = 1 ; ON_A10r = 1 ; ON_B10s = 1 ; ON_B10r = 1 ;
  ON_A11s = 1 ; ON_A11r = 1 ; ON_B11s = 1 ; ON_B11r = 1 ;
  ON_A12s = 1 ; ON_A12r = 1 ; ON_B12s = 1 ; ON_B12r = 1 ;
  ON_A13s = 1 ; ON_A13r = 1 ; ON_B13s = 1 ; ON_B13r = 1 ;
  ON_A14s = 1 ; ON_A14r = 1 ; ON_B14s = 1 ; ON_B14r = 1 ;
  ON_A15s = 1 ; ON_A15r = 1 ; ON_B15s = 1 ; ON_B15r = 1 ;
}

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Define the seed number (for statistical error assignment in the new IT/D1)
! and call the corresponding measured error table for nominal LHC magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (on_errors_LHC==1){
    readtable, file="error_table.tfs"; 
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!             apply field errors to MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (on_errors_LHC==1){
  call,   file="db5/measured_errors/Efcomp_MB.madx"  ;
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!     correct orbit distortion resulting from MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec,   initial_micado(4);
  exec,   initial_micado(4);
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!           apply field errors to all other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Nominal LHC magnets
! Separation Dipoles
if (on_errors_LHC==1){
  call,   file="db5/measured_errors/Efcomp_MBRB.madx";
  call,   file="db5/measured_errors/Efcomp_MBRC.madx";
  call,   file="db5/measured_errors/Efcomp_MBRS.madx";
  call,   file="db5/measured_errors/Efcomp_MBX.madx" ;
  call,   file="db5/measured_errors/Efcomp_MBW.madx" ;
};

! Quadrupoles
if (on_errors_LHC==1){
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQW.madx" ; on_B2S=ON_B2Saux;
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQTL.madx"; on_B2S=ON_B2Saux;
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQMC.madx"; on_B2S=ON_B2Saux;
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQX.madx" ; on_B2S=ON_B2Saux;
};
if (on_errors_Q4==1){
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQY.madx" ; on_B2S=ON_B2Saux;
} else {
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="fre/Q4Q5/Efcomp_MQY_noIP15.madx" ; on_B2S=ON_B2Saux;
};
if (on_errors_LHC==1){
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQM.madx" ; on_B2S=ON_B2Saux;
};
if (on_errors_Q5==1){
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQML.madx"; on_B2S=ON_B2Saux;
} else {
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="fre/Q4Q5/Efcomp_MQML_noIP15.madx"; on_B2S=ON_B2Saux;
};
if (on_errors_LHC==1){
  ON_B2Saux=on_B2S;on_B2S=0*ON_B2Saux;call,file="db5/measured_errors/Efcomp_MQ.madx"  ; on_B2S=ON_B2Saux;
};

if (on_errors_LHC==1){
  call, file="db5/measured_errors/Set_alignment_errors.madx";
};

! New IT/D1/D2/Q4/Q5
myseed = cp_myseed;

if (on_errors_IT==1){
  eoption,seed=myseed+101;
  if (useMQXFAB==1) {
    call, file="slhc/errors/Efcomp_MQXFA.madx";      ! new IT in IR1/5
    call, file="slhc/errors/Efcomp_MQXFB.madx";
  } else {
    call, file="slhc/errors/Efcomp_MQXFbody.madx"; ! new IT in IR1/5
    call, file="slhc/errors/Efcomp_MQXFends.madx";                            ! new IT in IR1/5
  };
};
if (on_errors_D1==1){
  eoption,seed=myseed+102;call, file="slhc/errors/Efcomp_MBXAB.madx";    ! new D1 in IR1/5
};
if (on_errors_D2==1){
  if (correct_for_D2==1){
    use_average_errors_MBRD=1;   ! using average errors for correction algorithm
  };
  eoption,seed=myseed+103;call, file="slhc/errors/Efcomp_MBRD.madx";   	! new D2 in IR1/5
};
if (on_errors_Q4==1){
  call, file="slhc/errors/Efcomp_MQY.madx";     ! old Q4 in IR1/5, but switched places around IP1-5
};
if (on_errors_MCBXF==1){
  eoption,seed=myseed+106;call, file="slhc/errors/Efcomp_MCBXFAB.madx";  ! new triplet correctors in IR1/5
};
if (on_errors_MBH==1){
  ON_B2saux=on_B2s;on_B2s=0; ON_B2raux=on_B2r;on_B2r=0;
  eoption,seed=myseed+107;call, file="slhc/errors/Efcomp_MBH.madx";
  on_B2s=ON_B2saux; on_B2r=ON_B2raux;
};
if (on_errors_MCBRD==1){
  eoption,seed=myseed+108;call, file="slhc/errors/Efcomp_MCBRD.madx";
};

!exec show_error_newHLmagnet;

!select, flag=error, clear;
!select, flag=error, pattern=".";
!esave,  file="error_all.tfs";


print, text="===============================================";
print, text="======  OPTICS PARAMETERS: AFTER ERRORS  ======";
print, text="===============================================";
call, file="slhc/toolkit/get_optics_params.madx";


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! MO settings
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

brho:=NRJ*1e9/clight;
if (mylhcbeam==1){
  KOF.A12B1:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A23B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A34B1:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A45B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A56B1:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A67B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A78B1:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A81B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A12B1:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A23B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A34B1:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A45B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A56B1:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A67B1:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A78B1:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A81B1:=Kmax_MO*I_MO/Imax_MO/brho;
};

if (mylhcbeam>1){
  KOF.A12B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A23B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A34B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A45B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A56B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A67B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOF.A78B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A81B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A12B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A23B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A34B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A45B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A56B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A67B2:=Kmax_MO*I_MO/Imax_MO/brho;
  KOD.A78B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A81B2:=Kmax_MO*I_MO/Imax_MO/brho;
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!               correction of field errors in MB (compatible with V6.503 & SLHC)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 select, flag=error, clear;
 select, flag=error, pattern=MB\.,class=multipole;
 select, flag=error, pattern=MBH\.,class=multipole;
 esave,  file="temp/MB.errors";
 system, "slhc/errors/corr_MB_ats_v4";
 call,   file="temp/MB_corr_setting.mad";
!exec reset_MB_corr;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! correction of triplet and D1 (only in collision, not compatible V6.503)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (NRJ>5000.0000){
  option, echo, warn, -info;
  select, flag=error, clear;
  select, flag=error, pattern=MQX,  class=multipole;
  select, flag=error, pattern=MBX,  class=multipole;
  !select, flag=error, pattern=MBRC, class=multipole;
  if (correct_for_D2==1){
    select, flag=error, pattern=MBRD, class=multipole;
  };
  if (correct_for_MCBX==1){
    select, flag=error, pattern=MCBXF, class=multipole;
  };
  esave,  file="temp/tripD1D2.errors";
  system, "slhc/errors/corr_tripD1_v6";
  call,   file="temp/MCX_setting.mad";
  !kcsx3.l1:=0 ;kcsx3.r1:=0 ;kcsx3.l5:=0 ;kcsx3.r5:=0 ; !switch off b3  correction in IR1 and IR5
  !kcox3.l1:=0 ;kcox3.r1:=0 ;kcox3.l5:=0 ;kcox3.r5:=0 ; !switch off b4  correction in IR1 and IR5
  !kcdx3.l1:=0 ;kcdx3.r1:=0 ;kcdx3.l5:=0 ;kcdx3.r5:=0 ; !switch off b5  correction in IR1 and IR5
  !kctx3.l1:=0 ;kctx3.r1:=0 ;kctx3.l5:=0 ;kctx3.r5:=0 ; !switch off b6  correction in IR1 and IR5
  !kqsx3.l1:=0 ;kqsx3.r1:=0 ;kqsx3.l5:=0 ;kqsx3.r5:=0 ; !switch off a2  correction in IR1 and IR5
  !kcssx3.l1:=0;kcssx3.r1:=0;kcssx3.l5:=0;kcssx3.r5:=0; !switch off a3  correction in IR1 and IR5
  !kcosx3.l1:=0;kcosx3.r1:=0;kcosx3.l5:=0;kcosx3.r5:=0; !switch off a4  correction in IR1 and IR5
  !kcdsx3.l1:=0;kcdsx3.r1:=0;kcdsx3.l5:=0;kcdsx3.r5:=0; !switch off a5  correction in IR1 and IR5
  !kctsx3.l1:=0;kctsx3.r1:=0;kctsx3.l5:=0;kctsx3.r5:=0; !switch off a6  correction in IR1 and IR5

  kcsx3.l2 :=0;kcsx3.r2 :=0;kcsx3.l8 :=0;kcsx3.r8 :=0; !switch off b3  correction in IR2 and IR8
  kcox3.l2 :=0;kcox3.r2 :=0;kcox3.l8 :=0;kcox3.r8 :=0; !switch off b4  correction in IR2 and IR8
  kctx3.l2 :=0;kctx3.r2 :=0;kctx3.l8 :=0;kctx3.r8 :=0; !switch off b6  correction in IR2 and IR8
  kqsx3.l2 :=0;kqsx3.r2 :=0;kqsx3.l8 :=0;kqsx3.r8 :=0; !switch off a2  correction in IR2 and IR8
  kcssx3.l2:=0;kcssx3.r2:=0;kcssx3.l8:=0;kcssx3.r8:=0; !switch off a3  correction in IR2 and IR8
  kcosx3.l2:=0;kcosx3.r2:=0;kcosx3.l8:=0;kcosx3.r8:=0; !switch off a4  correction in IR2 and IR8

  option, -echo; !exec reset_MQX_corr;                             !switch off all IT multipole correction in all IR's
};

if (correct_for_D2==1){
  ! Remove the average errors and assign the real errors of D2
  use_average_errors_MBRD=0;
  call,file="slhc/errors/D2_errortable_v5";
  eoption,add=false;
  eoption,seed=myseed+103;
  call, file="slhc/errors/Efcomp_MBRD.madx";
  eoption,add=true;
};


print, text="==================================================";
print, text="======  OPTICS PARAMETERS: BEFORE MATCHING  ======";
print, text="==================================================";
call, file="slhc/toolkit/get_optics_params.madx";



!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    correct orbit distortion resulting from other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec, initial_micado(4);
  exec, initial_micado(4);
  exec, initial_micado(4);
  exec, initial_micado(4);
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    final orbit correction before applying crossing scheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec, final_micado(0.004);
};

! end of orbit correction, now switch ON crossing scheme
! restoring crossing angle
exec, crossing_restore;

! coguess,x=x.ip1,px=px.ip1,y=y.ip1,py=py.ip1;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!   Fine tuning of coupling after CO correction and with Xscheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
call,file="slhc/errors/FineCouplingCorrectionSimplex.madx";

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 Limit corrector strength
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
call,file="slhc/errors/corr_limit.madx";

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 matching of orbit, tune and chromaticity
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if(ON_COLLISION==0) {ON_BB_CHARGE:=1;};    ! W/o head-on Q and Q' are matched with bb

!Rematch the Xscheme towards specified separation and Xange in IP1/2/5/8
call,file="slhc/toolkit/rematchCOIP.madx";
!Rematch the CO in the arc for dispersion correction
if(ON_DISP<>0) {call,file="slhc/toolkit/rematchCOarc.madx";};

if(mylhcbeam==1){
  kqtf=kqtf.b1;kqtd=kqtd.b1;kqtf.b1:=kqtf;kqtd.b1:=kqtd;
  ksf=ksf.b1;ksd=ksd.b1;ksf.b1:=ksf;ksd.b1:=ksd;
};
if(mylhcbeam>1){
  kqtf=kqtf.b2;kqtd=kqtd.b2;kqtf.b2:=kqtf;kqtd.b2:=kqtd;
  ksf=ksf.b2;ksd=ksd.b2;ksf.b2:=ksf;ksd.b2:=ksd;
};

 match;
 global, q1=qx0, q2=qy0;
 vary,   name=kqtf, step=1.0E-7 ;
 vary,   name=kqtd, step=1.0E-7 ;
 lmdif,  calls=100, tolerance=1.0E-21;
 endmatch;

 match,chrom;
 global, dq1=qprime, dq2=qprime;
 vary,   name=ksf;
 vary,   name=ksd;
 lmdif,  calls=100, tolerance=1.0E-21;
 endmatch;

 match,chrom;
 global, dq1=qprime, dq2=qprime;
 global, q1=qx0, q2=qy0;
 vary,   name=ksf;
 vary,   name=ksd;
 vary,   name=kqtf, step=1.0E-7 ;
 vary,   name=kqtd, step=1.0E-7 ;
 lmdif,  calls=500, tolerance=1.0E-21;
 endmatch;


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 Check corrector strength
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
call, file="slhc/errors/corr_value_limit.madx";



